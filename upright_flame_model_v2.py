#最后七行是显示的调用函数
#line249-1999是两个样本数据，仅供测试，可以删除

#5、垂直圆柱火焰模型视角系数
from sympy import Symbol, sqrt, cos, sin, atan, log, nsolve, solveset,solve
from matplotlib.patches import Circle, Rectangle
import matplotlib.pyplot as plt
import numpy as np
import math
# import scipy.interpolate as spi

#L表示圆柱体火焰的高度
#d表示圆柱体火焰直径
#r表示圆柱中心线到目标微元的水平距离
#l=2*L/d
pi= np.pi
#epsilon=0.5
sigma=5.6697*(10**(-8))

#暂时不用
def tempCal(H):
    if (0<H and H<206.43):   #(0<H/100/13.7055<0.1)(137.055 155.481 177.253 192.076 206.43)
        T=973.8*(H/2064.3)**0.028+273.15
    elif (206.43<H and H<309.6450):  #(0.1<H/100/13.7055<0.15)(205.5828 233.2215  265.8795  288.1140  309.6450)
        T=52.99*(H/2064.3)**(-1.22)+273.15
    elif (H>309.6450):  #(H/100/13.7055>0.15)
        T=16.91*(H/2064.3)**(-1.788)+273.15
    return T

#垂直表面jv接收的来自整个火焰的辐射热流
#For point (r,z), calculate the q value
def d_flame_fitting(d_original, height_original, layer_thickness):
    Height=np.max(height_original)
    layerNum=math.ceil(Height/layer_thickness)
    H_array=np.linspace(0,Height,layerNum)

    x=height_original
    y=d_original
    exponential_number=8
    f1 = np.polyfit(x[1:len(x)-1], y[1:len(y)-1],  exponential_number)
    d_flame=np.polyval(f1, H_array)
    # in curve fitting, we need to avoid d_flame <= 0
    d_flame[d_flame <= 0] = 0.001
    return d_flame

def heat_flux_v(d_flame, height_original, z_height, layer_thickness, x_distance):
    #z：观测点高度
    #d_flame:火焰直径，array
    #Height:火焰高度
    #L:火焰高度
    #x_distance:圆柱边缘到目标微元的水平距离
    Height=np.max(height_original)
    layerNum=math.ceil(Height/layer_thickness)
    H_array=np.linspace(Height/layerNum,Height,layerNum)
    Qv_total=0.0    
    k=-3.674
    z=z_height
    i=0
    r=max(d_flame)/2+x_distance
    #r表示圆柱中心线到目标微元的水平距离
    for i in range (0,layerNum):
        H=H_array[i]
        if (d_flame[i]==0):
            d_flame[i]=0.01
        S=2*r/d_flame[i]
        h1=2*(H+layer_thickness-z)/d_flame[i]
        h2=2*(H-z)/d_flame[i]
        A1=(h1**2+S**2+1)/(2*S)
        A2=(h2**2+S**2+1)/(2*S)
        #EQ(13)
        Fv1=(1/(pi*S))*atan(h1/sqrt(S**2-1))-(h1/(pi*S))*atan(sqrt((S-1)/(S+1)))+(A1*h1)/(pi*S*sqrt(A1**2-1))*atan(sqrt(((A1+1)*(S-1))/((A1-1)*(S+1))))
       
        Fv2=(1/(pi*S))*atan(h2/sqrt(S**2-1))-(h2/(pi*S))*atan(sqrt((S-1)/(S+1)))+(A2*h2)/(pi*S*sqrt(A2**2-1))*atan(sqrt(((A2+1)*(S-1))/((A2-1)*(S+1))))
        Fv=Fv1-Fv2
        #print(Fv1)
        T=600 #tempreture
        #T=tempCal(H)
        epsilon=1-math.e**(k*d_flame[i]/100) #发射率
        E=sigma*epsilon*(T**4)

        qv=Fv*E 
        Qv_total=Qv_total+qv #EQ(6)
    return Qv_total
    #print(Qv_total)

def draw_rad_heat_flux_curve_Fv(d_flame, height_original, layer_thickness, x_distance):
    #d_flame:火焰直径，array
    #x_distance是水平方向上观测点与火焰的距离
    z_height=np.max(height_original)
    h = np.arange(z_height/100, z_height, z_height/100) #Radius
    y = []
    for h_dis in h:
        y_1 = heat_flux_v(d_flame, height_original, h_dis, layer_thickness, x_distance)
        #print(y_1)
        y.append(y_1)
    plt.plot(h, y, label="Radiative heat flux")
    plt.xlabel("Height of observation (m)")
    plt.ylabel("Radiative heat flux (kW/m^2)")
    plt.text(0.01, 0.01, 'r='+str(int(x_distance))+" m", wrap=True)
    plt.legend()
    plt.show()

#相同半径的圆上热流密度分布\

def draw_rad_heat_flux_vertical_view(d_original, height_original, layer_thickness, x_distance):
    z_height=np.max(height_original)
    x = np.arange(z_height/5, z_height, z_height/5) #Radius
    y = []
    fig = plt.figure()
    ax = fig.add_subplot(111)
    #bx = fig.add_subplot(122)
    for x_dis in x:
        y_1 = heat_flux_v(d_original, height_original, x_dis, layer_thickness, x_distance)
        #print(y_1)
        y.append(y_1)
        cir = Circle(xy = (0.0, 0.0), radius=x_dis, alpha=0.5, facecolor= (0.1,0.7,0.5,x_dis*0.01))
        ax.add_patch(cir)
        plt.axis('scaled')
        plt.axis('equal')
    ax.plot(0, 0, 'ro') #flame 
    plt.text(layer_thickness, 0, str(round(y[0],3))+" kW/m^2", wrap=True)
    plt.text(x_dis, 0, str(round(y[-1], 3))+" kW/m^2", wrap=True)
    plt.title('Heat Flux distribution (Vertical View)')
    plt.xlabel("Distance to flame (m)")
    plt.ylabel("Distance to flame (m)")
    plt.show()
    #print(y)


#水平表面jH接收的来自整个火焰的辐射热流
#每个r处的heat_flux_h
def heat_flux_h(d_flame, height_original, layer_thickness, R_distance):
    #z=0
    #d_flame:火焰直径，array
    #Height:火焰高度
    #L:火焰高度
    Height=np.max(height_original)
    layerNum=math.ceil(Height/layer_thickness)
    H_array=np.linspace(layer_thickness,Height,layerNum)

    Qh_total=0    
    k=-3.674
    r=R_distance
    i=0
    #r表示圆柱中心线到目标微元的水平距离
    for i in range (1,layerNum):
        H=H_array[i]
        S=2*r/d_flame[i]
        B=(1+S**2)/(2*S)

        h1=2*(H+layer_thickness)/d_flame[i]
        h2=2*H/d_flame[i]
        A1=(h1**2+S**2+1)/(2*S)
        A2=(h2**2+S**2+1)/(2*S)

        Fh1=(B-1/S)/(pi*sqrt(B**2-1))*atan(sqrt((B+1)*(S-1)/(B-1)/(S+1)))-(A1-1/S)/(pi*sqrt(A1**2-1))*atan(sqrt((A1+1)*(S-1)/(A1-1)/(S+1)))
        Fh2=(B-1/S)/(pi*sqrt(B**2-1))*atan(sqrt((B+1)*(S-1)/(B-1)/(S+1)))-(A2-1/S)/(pi*sqrt(A2**2-1))*atan(sqrt((A2+1)*(S-1)/(A2-1)/(S+1)))

        Fh=Fh1-Fh2
        #print(Fh)
        T=600 #tempreture
        #T=tempCal(H)
        epsilon=1-math.e**(k*d_flame[i]/100) #发射率
        E=sigma*epsilon*(T**4)

        qh=Fh*E
        Qh_total=Qh_total+qh
    return Qh_total
    #print(Qh_total)

def draw_rad_heat_flux_curve_Fh(d_flame, height_original, R_distance_max, layer_thickness):
    #d_flame:火焰直径，array
    x = np.arange(max(d_flame), R_distance_max, (R_distance_max-(max(d_flame)))/10) #Radius
    y = []
    for x_dis in x:
        y_1 = heat_flux_h(d_flame, height_original, layer_thickness, x_dis)
        y.append(y_1)
    plt.plot(x, y, label="Radiative heat flux")
    plt.xlabel("Distance to flame (m)")
    plt.ylabel("Radiative heat flux (kW/m^2)")
    plt.legend()
    plt.show()

def flame_rad_heat_pa(d_flame, height_original, rad_heat, layer_thickness):
    X_a = Symbol('X_a')
    Height=np.max(height_original)
    layerNum=math.ceil(Height/layer_thickness)
    H_array=np.linspace(0,Height,layerNum)

    Qh_total=0    
    k=-3.674
    #r=R_distance
    i=0
    #r表示圆柱中心线到目标微元的水平距离
    for i in range (1,layerNum):
        H=H_array[i]
        S=2*X_a/d_flame[i]
        B=(1+S**2)/(2*S)

        h1=2*(H+layer_thickness)/d_flame[i]
        h2=2*H/d_flame[i]
        A1=(h1**2+S**2+1)/(2*S)
        A2=(h2**2+S**2+1)/(2*S)

        Fh1=(B-1/S)/(pi*sqrt(B**2-1))*atan(sqrt((B+1)*(S-1)/(B-1)/(S+1)))-(A1-1/S)/(pi*sqrt(A1**2-1))*atan(sqrt((A1+1)*(S-1)/(A1-1)/(S+1)))
        Fh2=(B-1/S)/(pi*sqrt(B**2-1))*atan(sqrt((B+1)*(S-1)/(B-1)/(S+1)))-(A2-1/S)/(pi*sqrt(A2**2-1))*atan(sqrt((A2+1)*(S-1)/(A2-1)/(S+1)))

        Fh=Fh1-Fh2
        #print(Fh)
        T=600 #tempreture
        #T=tempCal(H)
        epsilon=1-math.e**(k*d_flame[i]/100) #发射率
        E=sigma*epsilon*(T**4)

        qh=Fh*E
        Qh_total=Qh_total+qh
    #func_qh_xa=Qh_total

    func_qh_xa=Qh_total-rad_heat
    result=nsolve(func_qh_xa, X_a, 0.8) # 50 is the initial guess, this is required for nsolve function
    X_a=result
    #this is the Hazardous Radius (5 values)
    #print(X_a)
    return(X_a)

def flame_hazardous_radius_xa(d_flame, height_original, layer_thickness):
    try:
        rad_heat=[1.6,4.0,12.5,25.0,37.5]
        R_5=[0,0,0,0,0]
        for i in range(5):
            R_5[i]=flame_rad_heat_pa(d_flame, height_original, rad_heat[i], layer_thickness)
        #this is the Hazardous Radius (5 values)
        #plot the hazardous radius
        fig = plt.figure()
        ax = fig.add_subplot(111)
        colors = ["orange","cyan","pink","lime","yellow"]
        for i in range(5):
            cir = Circle(xy = (0.0, 0.0), radius=R_5[i], facecolor= colors[i]) #alpha=0.5,
            ax.add_patch(cir)
            x, y = 0, 0
            ax.plot(x, y, 'ro')
            #ax.arrow(0,0,int(R_5[i]),i*10,length_includes_head = True, head_width = 2, head_length = 2,fc = 'k',ec = 'k')
            plt.text(int(R_5[i]), i*10, str(int(R_5[i])), ha='right', wrap=True, rotation='vertical')
            plt.title('Hazardous Radius (5 levels)')
            plt.axis('scaled')
            plt.axis('equal')   #changes limits of x or y axis so that equal increments of x and y have the same length
        plt.show()
    except Exception as e:
        import  traceback
        traceback.print_exc()
#because there are too many loops, it will take a while to run this func.


#height_original是在一帧图像上提取的每一层火焰高度，数组
#d_original是在一帧图像上提取的每一层火焰直径，数组
#these are two examples of extracted height_original and d_original
height_original=np.array([361.51166	,
361.09803	,
360.6844	,
360.27077	,
359.85714	,
359.44351	,
359.02989	,
358.61626	,
358.20263	,
357.789	,
357.37537	,
356.96174	,
356.54811	,
356.13448	,
355.72085	,
355.30723	,
354.8936	,
354.47997	,
354.06634	,
353.65271	,
353.23908	,
352.82545	,
352.41182	,
351.99819	,
351.58456	,
351.17094	,
350.75731	,
350.34368	,
349.93005	,
349.51642	,
349.10279	,
348.68916	,
348.27553	,
347.8619	,
347.44828	,
347.03465	,
346.62102	,
346.20739	,
345.79376	,
345.38013	,
344.9665	,
344.55287	,
344.13924	,
343.72562	,
343.31199	,
342.89836	,
342.48473	,
342.0711	,
341.65747	,
341.24384	,
340.83021	,
340.41658	,
340.00296	,
339.58933	,
339.1757	,
338.76207	,
338.34844	,
337.93481	,
337.52118	,
337.10755	,
336.69392	,
336.2803	,
335.86667	,
335.45304	,
335.03941	,
334.62578	,
334.21215	,
333.79852	,
333.38489	,
332.97126	,
332.55764	,
332.14401	,
331.73038	,
331.31675	,
330.90312	,
330.48949	,
330.07586	,
329.66223	,
329.2486	,
328.83498	,
328.42135	,
328.00772	,
327.59409	,
327.18046	,
326.76683	,
326.3532	,
325.93957	,
325.52594	,
325.11232	,
324.69869	,
324.28506	,
323.87143	,
323.4578	,
323.04417	,
322.63054	,
322.21691	,
321.80328	,
321.38966	,
320.97603	,
320.5624	,
320.14877	,
319.73514	,
319.32151	,
318.90788	,
318.49425	,
318.08062	,
317.667	,
317.25337	,
316.83974	,
316.42611	,
316.01248	,
315.59885	,
315.18522	,
314.77159	,
314.35796	,
313.94434	,
313.53071	,
313.11708	,
312.70345	,
312.28982	,
311.87619	,
311.46256	,
311.04893	,
310.6353	,
310.22167	,
309.80805	,
309.39442	,
308.98079	,
308.56716	,
308.15353	,
307.7399	,
307.32627	,
306.91264	,
306.49901	,
306.08539	,
305.67176	,
305.25813	,
304.8445	,
304.43087	,
304.01724	,
303.60361	,
303.18998	,
302.77635	,
302.36273	,
301.9491	,
301.53547	,
301.12184	,
300.70821	,
300.29458	,
299.88095	,
299.46732	,
299.05369	,
298.64007	,
298.22644	,
297.81281	,
297.39918	,
296.98555	,
296.57192	,
296.15829	,
295.74466	,
295.33103	,
294.91741	,
294.50378	,
294.09015	,
293.67652	,
293.26289	,
292.84926	,
292.43563	,
292.022	,
291.60837	,
291.19475	,
290.78112	,
290.36749	,
289.95386	,
289.54023	,
289.1266	,
288.71297	,
288.29934	,
287.88571	,
287.47209	,
287.05846	,
286.64483	,
286.2312	,
285.81757	,
285.40394	,
284.99031	,
284.57668	,
284.16305	,
283.74943	,
283.3358	,
282.92217	,
282.50854	,
282.09491	,
281.68128	,
281.26765	,
280.85402	,
280.44039	,
280.02677	,
279.61314	,
279.19951	,
278.78588	,
278.37225	,
277.95862	,
277.54499	,
277.13136	,
276.71773	,
276.30411	,
275.89048	,
275.47685	,
275.06322	,
274.64959	,
274.23596	,
273.82233	,
273.4087	,
272.99507	,
272.58144	,
272.16782	,
271.75419	,
271.34056	,
270.92693	,
270.5133	,
270.09967	,
269.68604	,
269.27241	,
268.85878	,
268.44516	,
268.03153	,
267.6179	,
267.20427	,
266.79064	,
266.37701	,
265.96338	,
265.54975	,
265.13612	,
264.7225	,
264.30887	,
263.89524	,
263.48161	,
263.06798	,
262.65435	,
262.24072	,
261.82709	,
261.41346	,
260.99984	,
260.58621	,
260.17258	,
259.75895	,
259.34532	,
258.93169	,
258.51806	,
258.10443	,
257.6908	,
257.27718	,
256.86355	,
256.44992	,
256.03629	,
255.62266	,
255.20903	,
254.7954	,
254.38177	,
253.96814	,
253.55452	,
253.14089	,
252.72726	,
252.31363	,
251.9	,
251.48637	,
251.07274	,
250.65911	,
250.24548	,
249.83186	,
249.41823	,
249.0046	,
248.59097	,
248.17734	,
247.76371	,
247.35008	,
246.93645	,
246.52282	,
246.1092	,
245.69557	,
245.28194	,
244.86831	,
244.45468	,
244.04105	,
243.62742	,
243.21379	,
242.80016	,
242.38654	,
241.97291	,
241.55928	,
241.14565	,
240.73202	,
240.31839	,
239.90476	,
239.49113	,
239.0775	,
238.66388	,
238.25025	,
237.83662	,
237.42299	,
237.00936	,
236.59573	,
236.1821	,
235.76847	,
235.35484	,
234.94122	,
234.52759	,
234.11396	,
233.70033	,
233.2867	,
232.87307	,
232.45944	,
232.04581	,
231.63218	,
231.21856	,
230.80493	,
230.3913	,
229.97767	,
229.56404	,
229.15041	,
228.73678	,
228.32315	,
227.90952	,
227.49589	,
227.08227	,
226.66864	,
226.25501	,
225.84138	,
225.42775	,
225.01412	,
224.60049	,
224.18686	,
223.77323	,
223.35961	,
222.94598	,
222.53235	,
222.11872	,
221.70509	,
221.29146	,
220.87783	,
220.4642	,
220.05057	,
219.63695	,
219.22332	,
218.80969	,
218.39606	,
217.98243	,
217.5688	,
217.15517	,
216.74154	,
216.32791	,
215.91429	,
215.50066	,
215.08703	,
214.6734	,
214.25977	,
213.84614	,
213.43251	,
213.01888	,
212.60525	,
212.19163	,
211.778	,
211.36437	,
210.95074	,
210.53711	,
210.12348	,
209.70985	,
209.29622	,
208.88259	,
208.46897	,
208.05534	,
207.64171	,
207.22808	,
206.81445	,
206.40082	,
205.98719	,
205.57356	,
205.15993	,
204.74631	,
204.33268	,
203.91905	,
203.50542	,
203.09179	,
202.67816	,
202.26453	,
201.8509	,
201.43727	,
201.02365	,
200.61002	,
200.19639	,
199.78276	,
199.36913	,
198.9555	,
198.54187	,
198.12824	,
197.71461	,
197.30099	,
196.88736	,
196.47373	,
196.0601	,
195.64647	,
195.23284	,
194.81921	,
194.40558	,
193.99195	,
193.57833	,
193.1647	,
192.75107	,
192.33744	,
191.92381	,
191.51018	,
191.09655	,
190.68292	,
190.26929	,
189.85566	,
189.44204	,
189.02841	,
188.61478	,
188.20115	,
187.78752	,
187.37389	,
186.96026	,
186.54663	,
186.133	,
185.71938	,
185.30575	,
184.89212	,
184.47849	,
184.06486	,
183.65123	,
183.2376	,
182.82397	,
182.41034	,
181.99672	,
181.58309	,
181.16946	,
180.75583	,
180.3422	,
179.92857	,
179.51494	,
179.10131	,
178.68768	,
178.27406	,
177.86043	,
177.4468	,
177.03317	,
176.61954	,
176.20591	,
175.79228	,
175.37865	,
174.96502	,
174.5514	,
174.13777	,
173.72414	,
173.31051	,
172.89688	,
172.48325	,
172.06962	,
171.65599	,
171.24236	,
170.82874	,
170.41511	,
170.00148	,
169.58785	,
169.17422	,
168.76059	,
168.34696	,
167.93333	,
167.5197	,
167.10608	,
166.69245	,
166.27882	,
165.86519	,
165.45156	,
165.03793	,
164.6243	,
164.21067	,
163.79704	,
163.38342	,
162.96979	,
162.55616	,
162.14253	,
161.7289	,
161.31527	,
160.90164	,
160.48801	,
160.07438	,
159.66076	,
159.24713	,
158.8335	,
158.41987	,
158.00624	,
157.59261	,
157.17898	,
156.76535	,
156.35172	,
155.9381	,
155.52447	,
155.11084	,
154.69721	,
154.28358	,
153.86995	,
153.45632	,
153.04269	,
152.62906	,
152.21544	,
151.80181	,
151.38818	,
150.97455	,
150.56092	,
150.14729	,
149.73366	,
149.32003	,
148.9064	,
148.49277	,
148.07915	,
147.66552	,
147.25189	,
146.83826	,
146.42463	,
146.011	,
145.59737	,
145.18374	,
144.77011	,
144.35649	,
143.94286	,
143.52923	,
143.1156	,
142.70197	,
142.28834	,
141.87471	,
141.46108	,
141.04745	,
140.63383	,
140.2202	,
139.80657	,
139.39294	,
138.97931	,
138.56568	,
138.15205	,
137.73842	,
137.32479	,
136.91117	,
136.49754	,
136.08391	,
135.67028	,
135.25665	,
134.84302	,
134.42939	,
134.01576	,
133.60213	,
133.18851	,
132.77488	,
132.36125	,
131.94762	,
131.53399	,
131.12036	,
130.70673	,
130.2931	,
129.87947	,
129.46585	,
129.05222	,
128.63859	,
128.22496	,
127.81133	,
127.3977	,
126.98407	,
126.57044	,
126.15681	,
125.74319	,
125.32956	,
124.91593	,
124.5023	,
124.08867	,
123.67504	,
123.26141	,
122.84778	,
122.43415	,
122.02053	,
121.6069	,
121.19327	,
120.77964	,
120.36601	,
119.95238	,
119.53875	,
119.12512	,
118.71149	,
118.29787	,
117.88424	,
117.47061	,
117.05698	,
116.64335	,
116.22972	,
115.81609	,
115.40246	,
114.98883	,
114.57521	,
114.16158	,
113.74795	,
113.33432	,
112.92069	,
112.50706	,
112.09343	,
111.6798	,
111.26617	,
110.85255	,
110.43892	,
110.02529	,
109.61166	,
109.19803	,
108.7844	,
108.37077	,
107.95714	,
107.54351	,
107.12989	,
106.71626	,
106.30263	,
105.889	,
105.47537	,
105.06174	,
104.64811	,
104.23448	,
103.82085	,
103.40723	,
102.9936	,
102.57997	,
102.16634	,
101.75271	,
101.33908	,
100.92545	,
100.51182	,
100.09819	,
99.68456	,
99.27094	,
98.85731	,
98.44368	,
98.03005	,
97.61642	,
97.20279	,
96.78916	,
96.37553	,
95.9619	,
95.54828	,
95.13465	,
94.72102	,
94.30739	,
93.89376	,
93.48013	,
93.0665	,
92.65287	,
92.23924	,
91.82562	,
91.41199	,
90.99836	,
90.58473	,
90.1711	,
89.75747	,
89.34384	,
88.93021	,
88.51658	,
88.10296	,
87.68933	,
87.2757	,
86.86207	,
86.44844	,
86.03481	,
85.62118	,
85.20755	,
84.79392	,
84.3803	,
83.96667	,
83.55304	,
83.13941	,
82.72578	,
82.31215	,
81.89852	,
81.48489	,
81.07126	,
80.65764	,
80.24401	,
79.83038	,
79.41675	,
79.00312	,
78.58949	,
78.17586	,
77.76223	,
77.3486	,
76.93498	,
76.52135	,
76.10772	,
75.69409	,
75.28046	,
74.86683	,
74.4532	,
74.03957	,
73.62594	,
73.21232	,
72.79869	,
72.38506	,
71.97143	,
71.5578	,
71.14417	,
70.73054	,
70.31691	,
69.90328	,
69.48966	,
69.07603	,
68.6624	,
68.24877	,
67.83514	,
67.42151	,
67.00788	,
66.59425	,
66.18062	,
65.767	,
65.35337	,
64.93974	,
64.52611	,
64.11248	,
63.69885	,
63.28522	,
62.87159	,
62.45796	,
62.04433	,
61.63071	,
61.21708	,
60.80345	,
60.38982	,
59.97619	,
59.56256	,
59.14893	,
58.7353	,
58.32167	,
57.90805	,
57.49442	,
57.08079	,
56.66716	,
56.25353	,
55.8399	,
55.42627	,
55.01264	,
54.59901	,
54.18539	,
53.77176	,
53.35813	,
52.9445	,
52.53087	,
52.11724	,
51.70361	,
51.28998	,
50.87635	,
50.46273	,
50.0491	,
49.63547	,
49.22184	,
48.80821	,
48.39458	,
47.98095	,
47.56732	,
47.15369	,
46.74007	,
46.32644	,
45.91281	,
45.49918	,
45.08555	,
44.67192	,
44.25829	,
43.84466	,
43.43103	,
43.01741	,
42.60378	,
42.19015	,
41.77652	,
41.36289	,
40.94926	,
40.53563	,
40.122	,
39.70837	,
39.29475	,
38.88112	,
38.46749	,
38.05386	,
37.64023	,
37.2266	,
36.81297	,
36.39934	,
35.98571	,
35.57209	,
35.15846	,
34.74483	,
34.3312	,
33.91757	,
33.50394	,
33.09031	,
32.67668	,
32.26305	,
31.84943	,
31.4358	,
31.02217	,
30.60854	,
30.19491	,
29.78128	,
29.36765	,
28.95402	,
28.54039	,
28.12677	,
27.71314	,
27.29951	,
26.88588	,
26.47225	,
26.05862	,
25.64499	,
25.23136	,
24.81773	,
24.40411	,
23.99048	,
23.57685	,
23.16322	,
22.74959	,
22.33596	,
21.92233	,
21.5087	,
21.09507	,
20.68144	,
20.26782	,
19.85419	,
19.44056	,
19.02693	,
18.6133	,
18.19967	,
17.78604	,
17.37241	,
16.95878	,
16.54516	,
16.13153	,
15.7179	,
15.30427	,
14.89064	,
14.47701	,
14.06338	,
13.64975	,
13.23612	,
12.8225	,
12.40887	,
11.99524	,
11.58161	,
11.16798	,
10.75435	,
10.34072	,
9.92709	,
9.51346	,
9.09984	,
8.68621	,
8.27258	,
7.85895	,
7.44532	,
7.03169	,
6.61806	,
6.20443	,
5.7908	,
5.37718	,
4.96355	,
4.54992	,
4.13629	,
3.72266	,
3.30903	,
2.8954	,
2.48177	,
2.06814	,
1.65E+00	,
1.24E+00	,
8.27E-01	,
4.14E-01		
])
d_original=np.array([0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0	,
0.15947	,
0.18115	,
0.18641	,
0.18778	,
0.19113	,
0.19543	,
0.19457	,
0.19577	,
0.19371	,
0.19543	,
0.19749	,
0.20024	,
0.20282	,
0.20282	,
0.20953	,
0.20936	,
0.22003	,
0.22347	,
0.23878	,
0.24067	,
0.25615	,
0.25977	,
0.27731	,
0.28144	,
0.29572	,
0.30054	,
0.30983	,
0.31138	,
0.31912	,
0.32067	,
0.32566	,
0.32514	,
0.32686	,
0.33236	,
0.32927	,
0.3346	,
0.33133	,
0.33615	,
0.33374	,
0.34062	,
0.34011	,
0.34836	,
0.34681	,
0.36092	,
0.36522	,
0.38157	,
0.39034	,
0.40582	,
0.41425	,
0.43077	,
0.44332	,
0.46001	,
0.46982	,
0.48392	,
0.4927	,
0.50491	,
0.51506	,
0.52745	,
0.53588	,
0.54809	,
0.55755	,
0.56701	,
0.57648	,
0.58749	,
0.59764	,
0.60779	,
0.61673	,
0.63101	,
0.63892	,
0.65251	,
0.66352	,
0.67591	,
0.68382	,
0.69501	,
0.70361	,
0.7184	,
0.72305	,
0.73784	,
0.7449	,
0.75831	,
0.76674	,
0.78463	,
0.79513	,
0.81199	,
0.82369	,
0.84416	,
0.85327	,
0.86945	,
0.8839	,
0.90213	,
0.91452	,
0.93585	,
0.94944	,
0.97008	,
0.98522	,
1.00845	,
1.02273	,
1.04337	,
1.05954	,
1.07967	,
1.09085	,
1.11614	,
1.12835	,
1.15037	,
1.16379	,
1.18082	,
1.20112	,
1.21592	,
1.23897	,
1.25841	,
1.27802	,
1.29316	,
1.31105	,
1.32791	,
1.36438	,
1.379	,
1.4184	,
1.44283	,
1.48325	,
1.51043	,
1.55482	,
1.58596	,
1.63774	,
1.66578	,
1.71739	,
1.75472	,
1.80151	,
1.83781	,
1.88133	,
1.9154	,
1.96322	,
1.98782	,
2.0353	,
2.06799	,
2.1048	,
2.13473	,
2.17086	,
2.20355	,
2.24896	,
2.28543	,
2.33274	,
2.36853	,
2.405	,
2.45454	,
2.48774	,
2.54778	,
2.57703	,
2.6393	,
2.66614	,
2.73839	,
2.7642	,
2.84333	,
2.86484	,
2.95945	,
2.98526	,
3.09742	,
3.12151	,
3.23367	,
3.25707	,
3.36992	,
3.39108	,
3.49137	,
3.50823	,
3.59752	,
3.60784	,
3.69523	,
3.70813	,
3.78709	,
3.79174	,
3.8609	,
3.88171	,
3.94726	,
3.97495	,
4.0405	,
4.07284	,
4.13408	,
4.18156	,
4.2502	,
4.32125	,
4.38903	,
4.46541	,
4.54111	,
4.62764	,
4.69938	,
4.78935	,
4.85059	,
4.94418	,
4.99303	,
5.08903	,
5.14322	,
5.23663	,
5.28583	,
5.37942	,
5.43653	,
5.53304	,
5.58981	,
5.68856	,
5.74498	,
5.83685	,
5.88846	,
5.97223	,
6.02058	,
6.0942	,
6.15149	,
6.22306	,
6.28654	,
6.35586	,
6.42915	,
6.49228	,
6.57211	,
6.65382	,
6.7536	,
6.8305	,
6.93767	,
7.02214	,
7.14704	,
7.22256	,
7.35812	,
7.44964	,
7.59088	,
7.66967	,
7.8183	,
7.90483	,
8.04211	,
8.11368	,
8.24356	,
8.3165	,
8.43813	,
8.51021	,
8.63132	,
8.72284	,
8.83277	,
8.94166	,
9.054	,
9.17769	,
9.2988	,
9.42696	,
9.54756	,
9.69413	,
9.79804	,
9.94254	,
10.04318	,
10.19285	,
10.29503	,
10.44969	,
10.56702	,
10.72666	,
10.85517	,
11.01206	,
11.1705	,
11.33823	,
11.51061	,
11.69055	,
11.85845	,
12.03393	,
12.19082	,
12.34926	,
12.49669	,
12.64309	,
12.78278	,
12.92711	,
13.07695	,
13.21802	,
13.36201	,
13.50531	,
13.67768	,
13.84111	,
14.02467	,
14.19997	,
14.39024	,
14.58394	,
14.77765	,
14.96516	,
15.18072	,
15.34931	,
15.56934	,
15.73776	,
15.94695	,
16.11244	,
16.28585	,
16.43775	,
16.62286	,
16.76599	,
16.9492	,
17.07908	,
17.26729	,
17.40766	,
17.59139	,
17.7285	,
17.91791	,
18.06396	,
18.25027	,
18.39289	,
18.5816	,
18.72714	,
18.90433	,
19.04592	,
19.225	,
19.39824	,
19.55375	,
19.73284	,
19.88904	,
20.08464	,
20.21452	,
20.42595	,
20.55755	,
20.78051	,
20.89026	,
21.10633	,
21.22727	,
21.42356	,
21.54364	,
21.73975	,
21.84125	,
22.03668	,
22.11943	,
22.32019	,
22.41618	,
22.61539	,
22.73771	,
22.91937	,
23.06732	,
23.25518	,
23.41981	,
23.61627	,
23.78469	,
23.97513	,
24.11275	,
24.29356	,
24.44512	,
24.6125	,
24.75133	,
24.89446	,
25.0283	,
25.15646	,
25.29134	,
25.43051	,
25.56143	,
25.69269	,
25.82102	,
25.96432	,
26.09111	,
26.26004	,
26.39698	,
26.58157	,
26.70939	,
26.9086	,
27.02644	,
27.22221	,
27.31546	,
27.52619	,
27.59724	,
27.80454	,
27.86596	,
28.08564	,
28.1388	,
28.36725	,
28.43417	,
28.67588	,
28.74796	,
28.96437	,
29.05934	,
29.26526	,
29.36297	,
29.55909	,
29.66661	,
29.85532	,
29.97575	,
30.15225	,
30.31516	,
30.47859	,
30.65372	,
30.81182	,
30.98781	,
31.13317	,
31.30864	,
31.4559	,
31.61985	,
31.7518	,
31.88409	,
31.99883	,
32.09861	,
32.19942	,
32.30522	,
32.39433	,
32.49084	,
32.56774	,
32.66717	,
32.75525	,
32.85021	,
32.97201	,
33.08813	,
33.19066	,
33.31298	,
33.40794	,
33.54505	,
33.62332	,
33.75338	,
33.85384	,
33.96222	,
34.05529	,
34.15163	,
34.23919	,
34.33278	,
34.41897	,
34.52408	,
34.62781	,
34.71108	,
34.82582	,
34.91063	,
35.02779	,
35.11346	,
35.23577	,
35.30802	,
35.43739	,
35.50466	,
35.64796	,
35.72296	,
35.86007	,
35.98634	,
36.11898	,
36.24972	,
36.39664	,
36.51878	,
36.65795	,
36.7684	,
36.89845	,
37.0218	,
37.1159	,
37.23546	,
37.3447	,
37.47751	,
37.60963	,
37.74072	,
37.88316	,
38.00616	,
38.1388	,
38.2649	,
38.38773	,
38.4875	,
38.5706	,
38.62943	,
38.71252	,
38.76293	,
38.84894	,
38.90554	,
38.98846	,
39.0743	,
39.16892	,
39.27197	,
39.38189	,
39.48735	,
39.61362	,
39.73215	,
39.82247	,
39.94306	,
40.00224	,
40.12576	,
40.18494	,
40.29676	,
40.3611	,
40.44694	,
40.50887	,
40.61759	,
40.68056	,
40.79135	,
40.83556	,
40.9331	,
40.97559	,
41.05765	,
41.10995	,
41.18839	,
41.22865	,
41.29884	,
41.36335	,
41.42786	,
41.51371	,
41.58407	,
41.67008	,
41.72152	,
41.80685	,
41.87721	,
41.96993	,
42.04236	,
42.14953	,
42.21783	,
42.32414	,
42.40311	,
42.53488	,
42.61608	,
42.75577	,
42.82303	,
42.95584	,
43.01003	,
43.12581	,
43.17828	,
43.28425	,
43.32485	,
43.40708	,
43.43048	,
43.51357	,
43.52578	,
43.6075	,
43.62762	,
43.69214	,
43.70435	,
43.76387	,
43.7809	,
43.8363	,
43.84266	,
43.88705	,
43.88343	,
43.9175	,
43.923	,
43.95362	,
43.95311	,
43.99181	,
43.98665	,
44.019	,
44.03775	,
44.0682	,
44.08058	,
44.11809	,
44.14062	,
44.1709	,
44.18741	,
44.20014	,
44.22096	,
44.21029	,
44.22922	,
44.22199	,
44.22698	,
44.217	,
44.23059	,
44.21253	,
44.22199	,
44.21597	,
44.20014	,
44.21408	,
44.1943	,
44.1998	,
44.17296	,
44.15834	,
44.13976	,
44.1174	,
44.09228	,
44.09125	,
44.0405	,
44.03706	,
43.96429	,
43.92782	,
43.85901	,
43.80912	,
43.75407	,
43.69368	,
43.62522	,
43.56965	,
43.506	,
43.45817	,
43.40846	,
43.35496	,
43.30472	,
43.25432	,
43.20942	,
43.14628	,
43.10155	,
43.02483	,
42.99919	,
42.9364	,
42.89219	,
42.83731	,
42.77538	,
42.71552	,
42.67165	,
42.60215	,
42.56361	,
42.49119	,
42.44973	,
42.39244	,
42.33498	,
42.29094	,
42.22247	,
42.17517	,
42.11943	,
42.07762	,
42.03118	,
41.99402	,
41.96357	,
41.93759	,
41.9025	,
41.88099	,
41.8557	,
41.84074	,
41.81218	,
41.79291	,
41.76091	,
41.74079	,
41.70672	,
41.71292	,
41.68195	,
41.68367	,
41.64324	,
41.63808	,
41.59164	,
41.58957	,
41.53469	,
41.51439	,
41.43543	,
41.39638	,
41.30538	,
41.25531	,
41.16723	,
41.10857	,
41.00621	,
40.96252	,
40.87289	,
40.84519	,
40.76864	,
40.7535	,
40.684	,
40.66404	,
40.61312	,
40.59145	,
40.53571	,
40.50732	,
40.43404	,
40.40514	,
40.32239	,
40.29142	,
40.2116	,
40.1655	,
40.08791	,
40.03252	,
39.95596	,
39.88904	,
39.80922	,
39.74746	,
39.66643	,
39.59969	,
39.51883	,
39.45002	,
39.36314	,
39.27816	,
39.19318	,
39.10492	,
39.01512	,
38.92876	,
38.8486	,
38.76448	,
38.68001	,
38.59571	,
38.51692	,
38.43108	,
38.34214	,
38.2489	,
38.15222	,
38.04969	,
37.93752	,
37.83	,
37.72523	,
37.62477	,
37.5231	,
37.43915	,
37.33748	,
37.2635	,
37.16837	,
37.10954	,
37.02885	,
36.96658	,
36.88589	,
36.84168	,
36.75636	,
36.70182	,
36.60824	,
36.54751	,
36.42588	,
36.34881	,
36.22684	,
36.13309	,
35.99718	,
35.89362	,
35.77388	,
35.66791	,
35.55489	,
35.46509	,
35.36875	,
35.28721	,
35.20567	,
35.13204	,
35.04791	,
34.98753	,
34.89687	,
34.83924	,
34.75477	,
34.6925	,
34.6168	,
34.56107	,
34.49759	,
34.45355	,
34.38095	,
34.34861	,
34.27257	,
34.24178	,
34.16918	,
34.13236	,
34.05839	,
34.00472	,
33.92833	,
33.87931	,
33.81342	,
33.75992	,
33.69506	,
33.63932	,
33.56879	,
33.51924	,
33.44751	,
33.40605	,
33.32881	,
33.28219	,
33.21096	,
33.17002	,
33.10585	,
33.0668	,
33.00487	,
32.96513	,
32.90974	,
32.87361	,
32.82252	,
32.78674	,
32.7365	,
32.71259	,
32.67251	,
32.63948	,
32.60455	,
32.57841	,
32.55501	,
32.52611	,
32.50271	,
32.48224	,
32.44543	,
32.41928	,
32.39502	,
32.3773	,
32.35201	,
32.32965	,
32.31159	,
32.29455	,
32.27666	,
32.26806	,
32.26393	,
32.25688	,
32.26101	,
32.25344	,
32.25361	,
32.23813	,
32.23245	,
32.20527	,
32.20097	,
32.1602	,
32.13869	,
32.09706	,
32.06352	,
32.02154	,
31.98696	,
31.94877	,
31.92503	,
31.87359	,
31.85295	,
31.80633	,
31.78087	,
31.73924	,
31.71292	,
31.6687	,
31.64066	,
31.59112	,
31.56635	,
31.51112	,
31.47878	,
31.41771	,
31.38141	,
31.31828	,
31.27665	,
31.21816	,
31.17308	,
31.12027	,
31.07468	,
31.02995	,
30.98419	,
30.9448	,
30.90059	,
30.86773	,
30.83177	,
30.80872	,
30.77552	,
30.75023	,
30.73182	,
30.71686	,
30.69759	,
30.69019	,
30.68039	,
30.66989	,
30.65819	,
30.66146	,
30.66301	,
30.66267	,
30.66869	,
30.67781	,
30.68658	,
30.70464	,
30.71909	,
30.73802	,
30.73905	,
30.75247	,
30.75126	,
30.76021	,
30.75488	,
30.7566	,
30.74249	,
30.73526	,
30.70671	
])

# layer_thickness=0.01
# d_flame= d_flame_fitting(d_original, height_original, layer_thickness)
# #d_flame=[0.01, 0.7, 0.66, 0.61, 0.58, 0.55, 0.53, 0.54, 0.5, 0.48, 0.45, 0.45, 0.41, 0.36, 0.32, 0.28, 0.28, 0.26, 0.22, 0.19, 0.13, 0.08, 0.06, 0.03, 0.06, 0.07, 0.11]
# #height_original=np.array([0.16, 0.15, 0.14, 0.13, 0.13, 0.12, 0.11, 0.11, 0.1, 0.09, 0.09, 0.08, 0.07, 0.07, 0.06, 0.05, 0.05, 0.04, 0.03, 0.03, 0.02, 0.01, 0.01])
#
# # four key display functions
# #垂直圆柱体火焰在水平方向热流密度分布
# R_distance_max=5#这个参数是绘制曲线时x轴的范围，应大于火焰半径
# draw_rad_heat_flux_curve_Fh(d_flame, height_original, R_distance_max, layer_thickness)
#
# #垂直圆柱体火焰垂直方向的热流密度分布
# x_distance=1#这个参数是圆柱外边缘到目标微元的水平距离，是一个给定的参数
# draw_rad_heat_flux_curve_Fv(d_flame, height_original, layer_thickness, x_distance)
#
# #垂直圆柱体火焰热流密度分布俯视图
# draw_rad_heat_flux_vertical_view(d_flame, height_original, layer_thickness)
#
# #垂直圆柱体火焰伤害半径示意图
# flame_hazardous_radius_xa(d_flame, height_original)
# #Notes: layer_thickness need to be set based on the specific circumstance. Here it is 0.01